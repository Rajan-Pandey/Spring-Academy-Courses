1: Changes from Previous Workshops

If you've taken the previous labs in this course, you'll notice the following changes, which we've made on your behalf to make this lab easier to understand and complete.
Test Resource Files

We've provided the following files which you will utilize in this lab.

    src/main/resources/schema.sql
    src/test/resources/data.sql



2: Review the Current Data Management Pattern

Our Family Cash Card REST API currently relies upon CashCard data hard-coded directly into our CashCardController. Our tests in CashCardApplicationTests assert that this data is present.

We know that a web Controller shouldn't manage data. This is a violation of Separation of Concerns. Web traffic is web traffic, data is data, and healthy software has architectures dedicated to each area.

    Review CashCardController.

    Note lines such as the following:

...
if (requestedId.equals(99L)) {
   CashCard cashCard = new CashCard(99L, 123.45);
   return ResponseEntity.ok(cashCard);
...

This is data management. Our Controller shouldn't be concerned with checking IDs or creating data.

Review CashCardApplicationTests.

    Interestingly, while our tests make assertions about the data, they don't rely upon or specify how that data is created or managed.

    This decoupling is important, as it helps us make the changes we need.

Prepare to Refactor to use a Repository and Database

Refactoring is the act of altering the implementation of a software system without altering its inputs, outputs, or behavior.

Our tests will allow us to change the implementation of our Cash Card API's data management from hard-coded data inside our Controller, to utilizing a Repository and database.

This lab is a continuous example of the Red, Green, Refactor development loop that we learned about in a previous lesson.

As we refactor, our tests will periodically fail when we run them. We'll know we've successfully removed all hard-coded data from our Controller and "migrated" that data (and data management) to a database-backed Repository when our tests pass again.




3: Add Spring Data Dependencies

This project was originally created using the Spring Initializr, which allowed us to automatically add dependencies to our project. However, now we must manually add dependencies to our project.

    Add dependencies for Spring Data and a database.

    In build.gradle:

dependencies {
   implementation 'org.springframework.boot:spring-boot-starter-web'
   testImplementation 'org.springframework.boot:spring-boot-starter-test'

   // Add the two dependencies below
   implementation 'org.springframework.data:spring-data-jdbc'
   implementation 'com.h2database:h2'
}

Understand the dependencies.

The two dependencies we added are related, but different.

    implementation 'org.springframework.data:spring-data-jdbc'

    Spring Data has many implementations for a variety of relational and non-relational database technologies. Spring Data also has several abstractions on top of those technologies. These are commonly called an Object-Relational Mapping framework, or ORM.

    Here we'll elect to use Spring Data JDBC. From the Spring Data JDBC documentation:

        Spring Data JDBC aims at being conceptually easy...This makes Spring Data JDBC a simple, limited, opinionated ORM.

    implementation 'com.h2database:h2'

    Database management frameworks only work if they have a linked database. H2 is a "very fast, open source, JDBC API" SQL database implemented in Java. It works seamlessly with Spring Data JDBC.

Run the tests.

This will both install the dependencies, and verify that their addition hasn't broken anything.

We'll always use ./gradlew test to run our tests.

[~/exercises] $ ./gradlew test
...
BUILD SUCCESSFUL in 4s

The dependencies are now installed! You might notice additional output compared to previous labs, such as Shutting down embedded database.

Spring Auto Configuration is now starting and configuring an H2 database for us to use with tests. Great!


4: Create the CashCardRepository

    Create the CashCardRepository.

    Create src/main/java/example/cashcard/CashCardRepository.java and have it extend CrudRepository.

    package example.cashcard;

    import org.springframework.data.repository.CrudRepository;

    interface CashCardRepository extends CrudRepository {
    }

    Understand extends CrudRepository.

    This is where we tap into the magic of Spring Data and its data repository pattern.

    CrudRepository is an interface supplied by Spring Data. When we extend it (or other sub-Interfaces of Spring Data's Repository), Spring Boot and Spring Data work together to automatically generate the CRUD methods that we need to interact with a database.

    We'll use one of these CRUD methods, findById, later in the lab.

    Run the tests.

    We can see that everything compiles, however our application crashes badly upon startup. Digging through the failure messages we find this:

[~/exercises] $ ./gradlew test
...
CashCardApplicationTests > shouldNotReturnACashCardWithAnUnknownId() FAILED
 java.lang.IllegalStateException: Failed to load ApplicationContext for ...

Caused by:
java.lang.IllegalArgumentException: Could not resolve domain type of interface example.cashcard.CashCardRepository
...

This cryptic error means that we haven't indicated which data object the CashCardRepository should manage. For our application, the "domain type" of this repository will be the CashCard.

Configure the CashCardRepository.

Edit the CashCardRepository to specify that it manages the CashCard's data, and that the datatype of the Cash Card ID is Long.

interface CashCardRepository extends CrudRepository<CashCard, Long> {
}

Configure the CashCard.

When we configure the repository as CrudRepository<CashCard, Long> we indicate that the CashCard's ID is Long. However, we still need to tell Spring Data which field is the ID.

Edit the CashCard class to configure the id as the @Id for the CashCardRepository.

Don't forget to add the new import.

package example.cashcard;

// Add this import
import org.springframework.data.annotation.Id;

record CashCard(@Id Long id, Double amount) {
}

Run the tests.

[~/exercises] $ ./gradlew test
...
BUILD SUCCESSFUL in 4s

The tests pass, but we haven't made any meaningful changes to the code...yet!



5: Inject the CashCardRepository

Although we've configured our CashCard and CashCardRepository classes, we haven't utilized the new CashCardRepository to manage our CashCard data. Let's do that now.

    Inject the CashCardRepository into CashCardController.

    Edit CashCardController to accept a CashCardRepository.

@RestController
@RequestMapping("/cashcards")
class CashCardController {
   private final CashCardRepository cashCardRepository;

   private CashCardController(CashCardRepository cashCardRepository) {
      this.cashCardRepository = cashCardRepository;
   }
   ...

Run the tests.

If you run the tests now, they'll all pass, despite no other changes to the codebase utilizing the new, required constructor CashCardController(CashCardRepository cashCardRepository).

    BUILD SUCCESSFUL in 7s

    So how is this possible?

    Behold Auto Configuration and Construction Injection!

    Spring's Auto Configuration is utilizing its dependency injection (DI) framework, specifically constructor injection, to supply CashCardController with the correct implementation of CashCardRepository at runtime.

    Magical stuff!

Learning Moment: Remove the DI

We have just beheld the glory of auto configuration and constructor injection.

But what happens when we disable this wonder?

    Temporarily change the CashCardRepository to remove the implementation of CrudRepository.

interface CashCardRepository {
}

Compile the project and note the failure.

[~/exercises] $ ./gradlew build

Searching through the output, we find this line:

org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'example.cashcard.CashCardRepository' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {}

Clues such as NoSuchBeanDefinitionException, No qualifying bean, and expected at least 1 bean which qualifies as autowire candidate tell us that Spring is trying to find a properly configured class to provide during the dependency injection phase of Auto Configuration, but none qualify.

We can satisfy this DI requirement by extending the CrudRepository.

Undo all that.

Be sure to undo the temporary changes to CashCardRepository before moving on.

interface CashCardRepository extends CrudRepository<CashCard, Long> {
}




6: Use the CashCardRepository for Data Management

You're finally ready to use the CashCardRepository!

    Find the CashCard using findById.

    The CrudRepository interface provides many helpful methods, including findById(ID id).

    Update the CashCardController to utilize this method on the CashCardRepository and update the logic; be sure to import java.util.Optional;

import java.util.Optional;
...
@GetMapping("/{requestedId}")
private ResponseEntity<CashCard> findById(@PathVariable Long requestedId) {
    Optional<CashCard> cashCardOptional = cashCardRepository.findById(requestedId);
    if (cashCardOptional.isPresent()) {
        return ResponseEntity.ok(cashCardOptional.get());
    } else {
        return ResponseEntity.notFound().build();
    }
}

Understand the changes.

We've just altered the CashCardController.findById in several important ways.

    Optional<CashCard> cashCardOptional = cashCardRepository.findById(requestedId);

    We're calling CrudRepository.findById, which returns an Optional. This smart object might or might not contain the CashCard for which we're searching. Learn more about Optional here.

    cashCardOptional.isPresent()

    and

    cashCardOptional.get()

    This is how you determine if findById did or did not find the CashCard with the supplied id.

    If cashCardOptional.isPresent() is true, then the repository successfully found the CashCard and we can retrieve it with cashCardOptional.get().

    If not, the repository has not found the CashCard.

Run the tests.

We can see that the tests fail with a 500 INTERNAL_SERVER_ERROR.

CashCardApplicationTests > shouldReturnACashCardWhenDataIsSaved() FAILED
   org.opentest4j.AssertionFailedError:
   expected: 200 OK
   but was: 500 INTERNAL_SERVER_ERROR

This means the Cash Card API "crashed".

We need a bit more information...

Let's temporarily update the test output section of build.gradle with showStandardStreams = true, so that our test runs will produce a lot more output.

test {
 testLogging {
     events "passed", "skipped", "failed" //, "standardOut", "standardError"

     showExceptions true
     exceptionFormat "full"
     showCauses true
     showStackTraces true

     // Change from false to true
     showStandardStreams = true
 }
}

Rerun the tests.

Note that the test output is much more verbose.

Searching through the output we find these failures:

org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "CASH_CARD" not found (this database is empty); SQL statement:
 SELECT "CASH_CARD"."ID" AS "ID", "CASH_CARD"."AMOUNT" AS "AMOUNT" FROM "CASH_CARD" WHERE "CASH_CARD"."ID" = ? [42104-214]

The cause of our test failures is clear: Table "CASH_CARD" not found means we don't have a database nor any data.


7: Configure the Database

Our tests expect the API to find and return a CashCard with id of 99. However, we just removed the hard-coded CashCard data and replaced it with a call to cashCardRepository.findById.

Now our application is crashing, complaining about a missing database table named CASH_CARD:

org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "CASH_CARD" not found (this database is empty);

We need to help Spring Data configure the database and load some sample data, such as our friend, CashCard 99.

Spring Data and H2 can automatically create and populate the in-memory database we need for our test. We've provided these files for you, but you'll need to amend them: schema.sql and data.sql.

Note: Providing schema.sql and data.sql is one of many ways Spring provides to easily initialize a database. To learn more, read the Spring Framework documentation

    Edit schema.sql.

    As mentioned above, Spring Data will automatically configure a database for tests if we provide the correct file in the correct location.

    And we have! It's src/main/resources/schema.sql.

    But, it's currently disabled.

    Edit src/main/resources/schema.sql and remove the block-comment /* ... */.

CREATE TABLE cash_card
(
   ID     BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
   AMOUNT NUMBER NOT NULL DEFAULT 0
);

Understand schema.sql.

A database schema is a "blueprint" for how data is stored in a database. We won't cover database schemas in depth here.

Our database schema reflects the CashCard object that we understand, which contains an id and an amount.

Rerun the tests.

Note: If the test output is too verbose, revert the change in build.gradle performed previously.

Our tests no longer crash with a 500 INTERNAL_SERVER_ERROR. However, now we get a 404 NOT_FOUND

CashCardApplicationTests > shouldReturnACashCardWhenDataIsSaved() FAILED
 org.opentest4j.AssertionFailedError:
 expected: 200 OK
  but was: 404 NOT_FOUND

Translation: Our repository can't find CashCard with id of 99. So, why not?

Although we've helped Spring Data create a test database by un-commenting schema.sql, it's still an empty database.

Let's go load some data!

Load test data from data.sql.

Not only can Spring Data create our test database, it can also load data into it, which we can use in our tests.

Similar to schema.sql, we've provided src/test/resources/data.sql, but its contents are also commented-out.

Let's remove the block comments in src/test/resources/data.sql.

INSERT INTO CASH_CARD(ID, AMOUNT) VALUES (99, 123.45);

This SQL statement inserts a row into the CASH_CARD table with an ID=99 and AMOUNT=123.45, which matches the values we expect in our tests.

Rerun the tests.

They pass! Woo hoo!

    [~/exercises] $ ./gradlew test
    ...
    BUILD SUCCESSFUL in 7s

Success! We're now using real data in our API.
Learning Moment: main vs test resources

Have you noticed that src/main/resources/schema.sql and src/test/resources/data.sql are in different resources locations?

Can you guess why this is?

Remember that our Cash Card with with ID 99 and Amount 123.45 is a fake, made-up Cash Card that we only want to use in our tests. We don't want our "real" or production system to load Cash Card 99 into the system... what would happen to the real Cash Card 99?

Spring has provided a powerful feature for us: it allows us to separate our test-only resources from our main resources when needed.

Our scenario here is a common example of this: our database schema is always the same, but our data is not!

Thanks again, Spring!

8: Summary

You've now successfully refactored the way the Family Cash Card API manages its data. Spring Data is now creating an in-memory H2 database and loading it with test data, which our tests utilize to exercise our API.

Furthermore, we didn't change any of our tests! They actually guided us to a correct implementation. How awesome is that?!

