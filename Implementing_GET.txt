1: Write a Spring Boot Test for the GET endpoint

Just as if we’re on a real project, let’s use test driven development to implement our first API endpoint.

    Write the test.

    Let's start by implementing a test using Spring's @SpringBootTest.

    Update src/test/java/example/cashcard/CashCardApplicationTests.java with the following:

package example.cashcard;

import com.jayway.jsonpath.DocumentContext;
import com.jayway.jsonpath.JsonPath;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import static org.assertj.core.api.Assertions.assertThat;

@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
class CashCardApplicationTests {
    @Autowired
    TestRestTemplate restTemplate;

    @Test
    void shouldReturnACashCardWhenDataIsSaved() {
        ResponseEntity<String> response = restTemplate.getForEntity("/cashcards/99", String.class);

        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);
    }
}

Understand the test.

Let's understand several important elements in this test.

    @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)

    This will start our Spring Boot application and make it available for our test to perform requests to it.

    @Autowired
    TestRestTemplate restTemplate;

    We've asked Spring to inject a test helper that’ll allow us to make HTTP requests to the locally running application.

    Note: Even though @Autowired is a form of Spring dependency injection, it’s best used only in tests. Don't worry, we'll discuss this in more detail later.

    ResponseEntity<String> response = restTemplate.getForEntity("/cashcards/99", String.class);

    Here we use restTemplate to make an HTTP GET request to our application endpoint /cashcards/99.

    restTemplate will return a ResponseEntity, which we've captured in a variable we've named response. ResponseEntity is another helpful Spring object that provides valuable information about what happened with our request. We'll use this information throughout our tests in this course.

    assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);

    We can inspect many aspects of the response, including the HTTP Response Status code, which we expect to be 200 OK.

Now run the test.

What do you think will happen when we run the test?

It will fail, as expected. Why? As we’ve learned in test-first practice, we describe our expectations before we implement the code that satisfies those expectations.

Now, let’s run the test. Note that we'll run ./gradlew test for every test run.

    [~/exercises] $ ./gradlew test

    It fails! Search the output for the following:

    CashCardApplicationTests > shouldReturnACashCardWhenDataIsSaved() FAILED
      org.opentest4j.AssertionFailedError:
      expected: 200 OK
       but was: 404 NOT_FOUND

    But why are we getting this specific failure?

    Understand the test failure.

    As we explained, we expected our test to currently fail.

    Why is it failing due to an unexpected 404 NOT_FOUND HTTP response code?

    Answer: Since we haven't instructed Spring Web how to handle GET cashcards/99, Spring Web is automatically responding that the endpoint is NOT_FOUND.

    Thank you for handling that for us, Spring Web!

Next, let's get our application working properly.



2: Create a REST Controller

Spring Web Controllers are designed to handle and respond to HTTP requests.

    Create the Controller.

    Create the Controller class in src/main/java/example/cashcard/CashCardController.java.

Create CashCardController.java

package example.cashcard;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

class CashCardController {
}

Add the handler method.

Implement a findById() method to handle incoming HTTP requests.

class CashCardController {
   private ResponseEntity<String> findById() {
      return ResponseEntity.ok("{}");
   }
}

Now rerun the test.

What do we expect to happen when we rerun the tests?

expected: 200 OK
 but was: 404 NOT_FOUND

Same result! Why?

Despite the name, CashCardController isn't really a Spring Web Controller; it's just a class with Controller in the name. Thus, it’s not "listening" for our HTTP requests. Therefore, we need to tell Spring to make the Controller available as a Web Controller to handle requests to cashcards/* URLs.


3: Add the GET endpoint

    Update the Controller.

    Let's update our CashCardController so it’s configured to listen for and handle HTTP requests to /cashcards.

@RestController
@RequestMapping("/cashcards")
class CashCardController {

   @GetMapping("/{requestedId}")
   private ResponseEntity<String> findById() {
         return ResponseEntity.ok("{}");
   }
}

Understand the Spring Web annotations.

Let's review our additions.

     @RestController

    This tells Spring that this class is a Component of type RestController and capable of handling HTTP requests.

     @RequestMapping("/cashcards")

    This is a companion to @RestController that indicates which address requests must have to access this Controller.

     @GetMapping("/{requestedId}")
     private ResponseEntity<String> findById() {...}

    @GetMapping marks a method as a handler method. GET requests that match cashcards/{requestedID} will be handled by this method.

Run the tests.

They pass!

    [~/exercises] $ ./gradlew test
    ...
    BUILD SUCCESSFUL in 6s

We finally have a Controller and handler method that matches the request performed in our test. Sweet!



4: Complete the GET endpoint

As of now, our test only asserts that the request succeeded by checking for a 200 OK response status. Next, let's test that the response contains the correct values.

    Update the test.

assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);

DocumentContext documentContext = JsonPath.parse(response.getBody());
Number id = documentContext.read("$.id");
assertThat(id).isNotNull();

Understand the additions.

     DocumentContext documentContext = JsonPath.parse(response.getBody());

    This converts the response String into a JSON-aware object with lots of helper methods.

     Number id = documentContext.read("$.id");
     assertThat(id).isNotNull();

    We expect that when we request a Cash Card with id of 99 a JSON object will be returned with something in the id field. For now, assert that the id is not null.

Run the test -- and note the failure.

Since we return an empty JSON object {} we shouldn't be surprised that the id field is empty.

CashCardApplicationTests > shouldReturnACashCardWhenDataIsSaved() FAILED
    com.jayway.jsonpath.PathNotFoundException: No results for path: $['id']

Return a Cash Card from the Controller.

Let's make the test pass, but return something intentionally wrong, such as 1000L. You'll see why later.

Additionally, let’s utilize the CashCard data model class that we created in an earlier lesson. Please review it under src/main/java/example/cashcard/CashCard.java, if needed.

@GetMapping("/{requestedId}")
private ResponseEntity<CashCard> findById() {
   CashCard cashCard = new CashCard(1000L, 0.0);
   return ResponseEntity.ok(cashCard);
}

Run the test.

It passes! Yet - does it feel correct? Not really. Having the test pass with incorrect data seems wrong.

We asked you to intentionally return an incorrect id of 1000L to illustrate a point: It's important that tests pass or fail for for the right reason.

Update the test.

Update the test to assert that the id is correct.

DocumentContext documentContext = JsonPath.parse(response.getBody());
Number id = documentContext.read("$.id");
assertThat(id).isEqualTo(99);

Rerun the tests and note the new failure message.

expected: 99
 but was: 1000

Now, the test is failing for the right reason: We didn't return the correct id.

Fix CashCardController.

Update CashCardController to return the correct id.

@GetMapping("/{requestedId}")
private ResponseEntity<CashCard> findById() {
   CashCard cashCard = new CashCard(99L, 0.0);
   return ResponseEntity.ok(cashCard);
}

Run the test.

Woo hoo, it passes!

Test the amount.

Next, let's add an assertion for amount indicated by the JSON contract.

DocumentContext documentContext = JsonPath.parse(response.getBody());
Number id = documentContext.read("$.id");
assertThat(id).isEqualTo(99);

Double amount = documentContext.read("$.amount");
assertThat(amount).isEqualTo(123.45);

Run the tests and observe the failure.

Sure enough, we don’t return the correct amount in the response.

expected: 123.45
but was: 0.0

Return the correct amount.

Let's update the CashCardController to return the amount indicated by the JSON contract.

@GetMapping("/{requestedId}")
private ResponseEntity<CashCard> findById() {
   CashCard cashCard = new CashCard(99L, 123.45);
   return ResponseEntity.ok(cashCard);
}

Rerun the tests.

They pass! Excellent.

BUILD SUCCESSFUL in 6s


5: Using the @PathVariable

Thus far, we’ve ignored the requestedId in the Controller handler method. Let's use this path variable in our Controller to make sure we return the correct Cash Card.

    Add a new test method.

    Let's write a new test that expects to ignore Cash Cards that do not have an id of 99. Use 1000, as we have in previous tests.

@Test
void shouldNotReturnACashCardWithAnUnknownId() {
  ResponseEntity<String> response = restTemplate.getForEntity("/cashcards/1000", String.class);

  assertThat(response.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND);
  assertThat(response.getBody()).isBlank();
}

Notice that we're expecting a semantic HTTP Response Status code of 404 NOT_FOUND. If we request a Cash Card that doesn't exist, then that Cash Card is indeed "not found".

Run the test and note the result.

expected: 404 NOT_FOUND
but was: 200 OK

Add @PathVariable.

Let’s make the test pass by making the Controller return the specific Cash Card only if we submit the correct identifier.

To do this, first make the Controller aware of the path variable we’re submitting, by adding the @PathVariable annotation to the handler method argument.

@GetMapping("/{requestedId}")
private ResponseEntity<CashCard> findById(@PathVariable Long requestedId) {
    CashCard cashCard = new CashCard(99L, 123.45);
    return ResponseEntity.ok(cashCard);
}

@PathVariable makes Spring Web aware of the requestedId supplied in the HTTP request. Now it’s available for us to use in our handler method.

Utilize @PathVariable.

Update the handler method to return an empty response with status NOT_FOUND unless the requestedId is 99.

@GetMapping("/{requestedId}")
private ResponseEntity<CashCard> findById(@PathVariable Long requestedId) {
    if (requestedId.equals(99L)) {
        CashCard cashCard = new CashCard(99L, 123.45);
        return ResponseEntity.ok(cashCard);
    } else {
        return ResponseEntity.notFound().build();
    }
}

Rerun the tests.

Awesome! They pass!

[~/exercises] $ ./gradlew test
...
BUILD SUCCESSFUL in 6s



